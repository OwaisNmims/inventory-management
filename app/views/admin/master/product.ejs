<%- include ('../partials/head') %>

<!--  BEGIN NAVBAR  -->
<%- include ('../partials/header') %>
<!--  END NAVBAR  -->

<!--  BEGIN MAIN CONTAINER  -->
<div class="main-container" id="container">
  <div class="overlay"></div>
  <div class="search-overlay"></div>

  <!--  BEGIN SIDEBAR  -->
  <%- include ('../partials/sidebar') %>
  <!--  END SIDEBAR  -->

  <!--  BEGIN CONTENT AREA  -->
  <div id="content" class="main-content">
    <div class="layout-px-spacing">
      <div class="middle-content container-xxl p-0">
        <!--  BEGIN BREADCRUMBS  -->
        <div class="secondary-nav">
          <div class="breadcrumbs-container" data-page-heading="Analytics">
            <header class="header navbar navbar-expand-sm">
              <a
                href="javascript:void(0);"
                class="btn-toggle sidebarCollapse"
                data-placement="bottom"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  class="feather feather-menu"
                >
                  <line x1="3" y1="12" x2="21" y2="12"></line>
                  <line x1="3" y1="6" x2="21" y2="6"></line>
                  <line x1="3" y1="18" x2="21" y2="18"></line>
                </svg>
              </a>
              <div class="d-flex breadcrumb-content">
                <div class="page-header">
                  <div class="page-title"></div>

                  <nav class="breadcrumb-style-one" aria-label="breadcrumb">
                    <ol class="breadcrumb">
                      <li class="breadcrumb-item active">
                        <a href="./masters">Master</a>
                      </li>
                      <li class="breadcrumb-item active" aria-current="page">
                        Product
                      </li>
                    </ol>
                  </nav>
                </div>
              </div>
            </header>
          </div>
        </div>
        <!--  END BREADCRUMBS  -->

        <div class="main-content">
          <div class="table-template">
            <div class="table-header">
              <div class="table-title">
                <h3>Product</h3>
              </div>
              <div class="table-actions">
                <button
                  style="background: none; border: none"
                  class="create-product-modal"
                  title="Add New Product"
                >
                  <i class="fa-regular fa-square-plus"></i>
                </button>
                <button
                  style="background: none; border: none; margin-left: 10px;"
                  class="download-excel-sample"
                  title="Download Excel Sample Template"
                >
                  <i class="fa-solid fa-file-excel" style="color: #28a745;"></i>
                </button>
                <button
                  style="background: none; border: none; margin-left: 10px;"
                  class="bulk-upload-modal"
                  title="Bulk Upload Products from Excel"
                >
                  <i class="fa-solid fa-upload" style="color: #007bff;"></i>
                </button>
              </div>
            </div>

            <div class="table-content">
              <div class="table-filter-container"></div>
              <div class="table-content">
                <div class="table-responsive">
                  <table class="table table-bordered" id="table-content">
                    <thead>
                      <tr>
                        <th scope="col">Sr No.</th>
                        <th scope="col">Product Name</th>
                        <th scope="col">Product Code</th>
                        <th scope="col">Category</th>
                        <th scope="col">Price</th>
                        <th scope="col">Unit</th>
                        <th class="text-center" scope="col">Actions</th>
                      </tr>
                    </thead>
                    <tbody>
                      <% let i=1; for(let data of products) { %>

                      <tr data-id="<%= data.id %>">
                        <td><%= i %></td>

                        <td class="product-name"><%= data.name %></td>
                        <td class="product-code"><%= data.product_code %></td>
                        <td class="product-category">
                          <%= data.category || '-' %>
                        </td>
                        <td class="product-price"><%= data.price || '-' %></td>
                        <td class="product-unit"><%= data.unit || '-' %></td>
                        <td class="text-center">
                          <div class="action-btns">
                            <a
                              href="javascript:void(0);"
                              class="action-btn btn-edit bs-tooltip me-2"
                              data-id="<%= data.id %>"
                              data-toggle="tooltip"
                              data-placement="top"
                              title="Edit"
                            >
                              <svg
                                xmlns="http://www.w3.org/2000/svg"
                                width="24"
                                height="24"
                                viewBox="0 0 24 24"
                                fill="none"
                                stroke="currentColor"
                                stroke-width="2"
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                class="feather feather-edit-2"
                              >
                                <path
                                  d="M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"
                                ></path>
                              </svg>
                            </a>
                            <a
                              href="javascript:void(0);"
                              class="action-btn btn-delete bs-tooltip"
                              data-id="<%= data.id %>"
                              data-toggle="tooltip"
                              data-placement="top"
                              title="Delete"
                            >
                              <svg
                                xmlns="http://www.w3.org/2000/svg"
                                width="24"
                                height="24"
                                viewBox="0 0 24 24"
                                fill="none"
                                stroke="currentColor"
                                stroke-width="2"
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                class="feather feather-trash-2"
                              >
                                <polyline points="3 6 5 6 21 6"></polyline>
                                <path
                                  d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"
                                ></path>
                                <line x1="10" y1="11" x2="10" y2="17"></line>
                                <line x1="14" y1="11" x2="14" y2="17"></line>
                              </svg>
                            </a>
                          </div>
                        </td>
                      </tr>

                      <% i++ %> <% } %>
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <!--  END CONTENT AREA  -->
</div>
<!-- END MAIN CONTAINER -->

<!--ADD Modal -->
<div
  class="modal fade"
  id="add-product-modal"
  tabindex="-1"
  data-bs-backdrop="static"
  data-bs-keyboard="false"
  aria-labelledby="add-product-modal"
  aria-hidden="true"
>
  <div class="modal-dialog modal-xl" role="document">
    <div class="modal-content modal-inputform">
      <div class="modal-header modal-inputform-header">
        <h5 class="modal-title text-dark" id="">ADD PRODUCT</h5>
        <button
          type="button"
          class="btn fs-4 text-dark"
          data-bs-dismiss="modal"
          aria-label="Close"
        >
          <i class="fas fa-times"></i>
        </button>
      </div>
      <div class="modal-body">
        <div class="row info-container">
          <div class="col-md-4 select-fields">
            <div class="mb-3">
              <label class="form-label" for="add-product-name"
                >Product Name</label
              >
              <input type="text" class="form-control" id="add-product-name" />
            </div>
            <div class="mb-3">
              <label class="form-label" for="add-product-code"
                >Product Code</label
              >
              <input type="text" class="form-control" id="add-product-code" />
            </div>
            <div class="mb-3">
              <label class="form-label" for="add-product-category"
                >Category</label
              >
              <input
                type="text"
                class="form-control"
                id="add-product-category"
              />
            </div>
            <div class="mb-3">
              <label class="form-label" for="add-product-price">Price</label>
              <input
                type="number"
                step="0.01"
                class="form-control"
                id="add-product-price"
              />
            </div>
            <div class="mb-3">
              <label class="form-label" for="add-product-unit"
                >Unit Count</label
              >
              <input
                type="number"
                class="form-control"
                id="add-product-unit"
                placeholder="Number of inventory units to create"
                min="1"
                value="1"
              />
            </div>
            <div class="mb-3">
              <label class="form-label" for="add-product-description"
                >Description</label
              >
              <textarea
                class="form-control"
                id="add-product-description"
                rows="2"
              ></textarea>
            </div>
            <div class="mb-3">
              <label class="form-label" for="add-product-specifications"
                >Specifications</label
              >
              <textarea
                class="form-control"
                id="add-product-specifications"
                rows="2"
              ></textarea>
            </div>

            <div class="mb-3 d-grid gap-2">
              <button class="btn text-light add-product btn-info">ADD</button>
            </div>
          </div>
          <div class="col-md-8 selected-fields">
            <div class="table-responsive">
              <table class="table table-bordered" id="add-more-product-table">
                <thead>
                  <th>Sr No.</th>
                  <th>Product Name</th>
                  <th>Product Code</th>
                  <th>Category</th>
                  <th>Price</th>
                  <th>Unit</th>
                  <th>Action</th>
                </thead>
                <tbody></tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn create-product btn-primary">
          CREATE
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Edit modal -->
<div
  class="modal fade"
  id="edit-product-modal"
  tabindex="-1"
  data-bs-backdrop="static"
  data-bs-keyboard="false"
  aria-labelledby="edit-product-modal"
  aria-hidden="true"
>
  <div class="modal-dialog modal-xl" role="document">
    <div class="modal-content modal-inputform">
      <div class="modal-header modal-inputform-header">
        <h5 class="modal-title text-dark" id="">EDIT PRODUCT</h5>
        <button
          type="button"
          class="btn fs-4 text-dark"
          data-bs-dismiss="modal"
          aria-label="Close"
        >
          <i class="fas fa-times"></i>
        </button>
      </div>
      <div class="modal-body">
        <div class="row select-fields">
          <div class="col-md-6">
            <div class="mb-3">
              <label class="form-label" for="edit-product-name"
                >Product Name</label
              >
              <input type="text" class="form-control" id="edit-product-name" />
            </div>
            <div class="mb-3">
              <label class="form-label" for="edit-product-code"
                >Product Code</label
              >
              <input type="text" class="form-control" id="edit-product-code" />
            </div>
            <div class="mb-3">
              <label class="form-label" for="edit-product-category"
                >Category</label
              >
              <input
                type="text"
                class="form-control"
                id="edit-product-category"
              />
            </div>
            <div class="mb-3">
              <label class="form-label" for="edit-product-description"
                >Description</label
              >
              <textarea
                class="form-control"
                id="edit-product-description"
                rows="2"
              ></textarea>
            </div>
          </div>
          <div class="col-md-6">
            <div class="mb-3">
              <label class="form-label" for="edit-product-price">Price</label>
              <input
                type="number"
                step="0.01"
                class="form-control"
                id="edit-product-price"
              />
            </div>

            <div class="mb-3">
              <label class="form-label" for="edit-product-specifications"
                >Specifications</label
              >
              <textarea
                class="form-control"
                id="edit-product-specifications"
                rows="2"
              ></textarea>
            </div>
          </div>
        </div>
        
        <!-- Inventory Management Section -->
        <div class="row mt-4">
          <div class="col-12">
            <hr>
            <h6 class="mb-3"><i class="fas fa-boxes"></i> Inventory Management</h6>
            <div class="row">
              <div class="col-md-4">
                <div class="mb-3">
                  <label class="form-label">Current Inventory Units</label>
                  <div class="d-flex align-items-center">
                    <span id="current-inventory-count" class="badge bg-info fs-6 me-3">0</span>
                    <button type="button" class="btn btn-sm btn-outline-primary" id="refresh-inventory">
                      <i class="fas fa-sync-alt"></i> Refresh
                    </button>
                  </div>
                </div>
              </div>
              <div class="col-md-4">
                <div class="mb-3">
                  <label class="form-label" for="add-inventory-units">Add Inventory Units</label>
                  <div class="input-group">
                    <input
                      type="number"
                      class="form-control"
                      id="add-inventory-units"
                      placeholder="Units to add"
                      min="1"
                      max="100"
                    />
                    <button class="btn btn-success" type="button" id="add-inventory-btn">
                      <i class="fas fa-plus"></i> Add
                    </button>
                  </div>
                </div>
              </div>
              <div class="col-md-4">
                <div class="mb-3">
                  <label class="form-label">Quick Actions</label>
                  <div>
                    <button type="button" class="btn btn-sm btn-outline-info" id="show-available-only">
                      <i class="fas fa-filter"></i> Available Only
                    </button>
                    <button type="button" class="btn btn-sm btn-outline-secondary ms-1" id="show-all-units">
                      <i class="fas fa-list"></i> Show All
                    </button>
                  </div>
                </div>
              </div>
            </div>
            
            <!-- Inventory Units List -->
            <div class="inventory-units-container" style="max-height: 350px; overflow-y: auto;">
              <table class="table table-sm table-bordered" id="inventory-units-table">
                <thead class="table-light">
                  <tr>
                    <th style="width: 25%;">Unit Serial</th>
                    <th style="width: 15%;">Status</th>
                    <th style="width: 25%;">Company</th>
                    <th style="width: 20%;">Mapped Date</th>
                    <th style="width: 15%;">Actions</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td colspan="5" class="text-center text-muted">
                      <i class="fas fa-spinner fa-spin"></i> Loading inventory units...
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn save-product btn-primary">SAVE</button>
      </div>
    </div>
  </div>
</div>

<!-- Bulk Upload Modal -->
<div class="modal fade" id="bulk-upload-modal" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false" aria-labelledby="bulk-upload-modal" aria-hidden="true">
  <div class="modal-dialog modal-lg" role="document">
    <div class="modal-content modal-inputform">
      <div class="modal-header modal-inputform-header">
        <h5 class="modal-title text-dark" id="">BULK UPLOAD PRODUCTS</h5>
        <button type="button" class="btn fs-4 text-dark" data-bs-dismiss="modal" aria-label="Close">
          <i class="fas fa-times"></i>
        </button>
      </div>
      <div class="modal-body">
        <div class="row">
          <div class="col-12">
            <div class="alert alert-info">
              <h6><i class="fas fa-info-circle"></i> Instructions:</h6>
              <ol>
                <li>Download the Excel sample template using the green Excel icon</li>
                <li>Fill in your product data following the template format</li>
                <li>Upload the completed Excel file using the form below</li>
                <li>All products will be validated before insertion</li>
              </ol>
            </div>
          </div>
        </div>
        <div class="row">
          <div class="col-12">
            <div class="mb-3">
              <label for="excel-file" class="form-label"><strong>Select Excel File:</strong></label>
              <input type="file" class="form-control" id="excel-file" accept=".xlsx,.xls" required>
              <div class="form-text">Supported formats: .xlsx, .xls (Max size: 5MB)</div>
            </div>
          </div>
        </div>
        <div class="row" id="upload-progress" style="display: none;">
          <div class="col-12">
            <div class="progress mb-3">
              <div class="progress-bar" role="progressbar" style="width: 0%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">0%</div>
            </div>
            <div id="upload-status" class="text-center">
              <small class="text-muted">Processing...</small>
            </div>
          </div>
        </div>
        <div class="row" id="validation-results" style="display: none;">
          <div class="col-12">
            <div class="card">
              <div class="card-header">
                <h6 class="mb-0">Validation Results</h6>
              </div>
              <div class="card-body">
                <div id="validation-summary"></div>
                <div id="validation-errors" style="max-height: 200px; overflow-y: auto;"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-success" id="process-upload" disabled>
          <i class="fas fa-upload"></i> Process Upload
        </button>
      </div>
    </div>
  </div>
</div>

<%- include ('../partials/footer') %>

<!-- CUSTOM JS SCRIPT -->
<script>
  $(document).ready(function () {
    $(".create-product-modal").on("click", function () {
      $("#add-product-modal").modal("show");
    });

    function serializeTable(tableId) {
      let i = 1;
      $(`#${tableId} tbody tr`).each((index, element) => {
        $(element).find("td:eq(0)").text(i);
        i++;
      });
    }

    $(document).on("click", ".add-product", function () {
      let productName = $("#add-product-name").val().trim();
      let productCode = $("#add-product-code").val().trim().toUpperCase();
      let category = $("#add-product-category").val().trim();
      let price = $("#add-product-price").val();
      let unit = $("#add-product-unit").val().trim();
      let description = $("#add-product-description").val().trim();
      let specifications = $("#add-product-specifications").val().trim();

      let duplicate = false;
      if ($(document).find(".add-product-row").length > 0) {
        $(document)
          .find(".add-product-row")
          .each((index, element) => {
            if (
              $(element).find(".product-name").text() == productName ||
              $(element).find(".product-code").text() == productCode
            ) {
              createAlert({
                title: "ERROR",
                msg: "You cannot add duplicate Product Name/Code",
                type: "negative",
              });
              duplicate = true;
            }
          });
      }
      if (duplicate) {
        return;
      }

      if (!productName || !productCode) {
        createAlert({
          title: "ERROR",
          msg: "Product Name and Code are required",
          type: "negative",
        });
        return;
      }

      let count =
        $("#add-more-product-table tbody tr").length == undefined
          ? 0
          : $("#add-more-product-table tbody tr").length;
      let tableRow = `<tr class="add-product-row">
            <td>${++count}</td>
            <td class="product-name">${productName}</td>
            <td class="product-code">${productCode}</td>
            <td class="product-category">${category || "-"}</td>
            <td class="product-price">${price || "-"}</td>
            <td class="product-unit">${unit || "-"}</td>
            <td><button class='delete-row'>
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-trash-2">
                    <polyline points="3 6 5 6 21 6"></polyline>
                    <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
                    <line x1="10" y1="11" x2="10" y2="17"></line>
                    <line x1="14" y1="11" x2="14" y2="17"></line>
                </svg>
                </button></td>
            </tr>`;

      $("#add-more-product-table tbody").append(tableRow);
      $(
        "#add-product-name, #add-product-code, #add-product-category, #add-product-price, #add-product-unit, #add-product-description, #add-product-specifications"
      ).val("");
    });

    // Delete row
    $(document).on("click", ".delete-row", function () {
      let tableId = $(this).closest("table").attr("id");
      $(this).closest("tr").remove();
      if ($(`#${tableId} tbody tr`).length > 0) {
        serializeTable(tableId);
      }
    });

    // CREATE PRODUCTS
    $(document).on("click", ".create-product", function () {
      let products = [];
      if ($(document).find(".add-product-row").length > 0) {
        $(document)
          .find(".add-product-row")
          .each((index, element) => {
            let obj = {
              name: $(element).find(".product-name").text().trim(),
              productCode: $(element).find(".product-code").text().trim(),
              category:
                $(element).find(".product-category").text().trim() === "-"
                  ? ""
                  : $(element).find(".product-category").text().trim(),
              price:
                $(element).find(".product-price").text().trim() === "-"
                  ? null
                  : $(element).find(".product-price").text().trim(),
              unit:
                $(element).find(".product-unit").text().trim() === "-"
                  ? ""
                  : $(element).find(".product-unit").text().trim(),
            };
            products.push(obj);
          });
      }

      if (products.length === 0) {
        createAlert({
          title: "ERROR",
          msg: "Please add at least one product",
          type: "negative",
        });
        return;
      }

      $.ajax({
        method: "POST",
        url: "/admin/product/insert",
        headers: {
          "Content-Type": "application/json",
        },
        data: JSON.stringify({
          productList: products,
        }),
        success: function (response) {
          if (response.status === 200) {
            createAlert({
              title: "SUCCESS",
              msg: response.data.message,
              type: "positive",
            });
            setTimeout(() => {
              location.reload(true);
            }, 2000);
          } else {
            createAlert({
              title: "ERROR",
              msg: response.data.message,
              type: "negative",
            });
          }
          $("#add-product-modal").modal("hide");
        },
        error: function (xhr, status, error) {
          let errorMessage = "Something went wrong!";
          
          // Try to parse the error response
          if (xhr.responseJSON && xhr.responseJSON.data && xhr.responseJSON.data.message) {
            errorMessage = xhr.responseJSON.data.message;
          } else if (xhr.responseText) {
            try {
              const errorResponse = JSON.parse(xhr.responseText);
              if (errorResponse.data && errorResponse.data.message) {
                errorMessage = errorResponse.data.message;
              }
            } catch (e) {
              errorMessage = xhr.statusText || errorMessage;
            }
          }
          
          createAlert({
            title: "ERROR",
            msg: errorMessage,
            type: "negative",
          });
          $("#add-product-modal").modal("hide");
        },
      });
    });

    // EDIT PRODUCT
    $(document).on("click", ".btn-edit", function () {
      let productId = $(this).attr("data-id");

      // Get all product data from the table row
      let productName = $(this)
        .closest("tr")
        .find(".product-name")
        .text()
        .trim();
      let productCode = $(this)
        .closest("tr")
        .find(".product-code")
        .text()
        .trim();
      let productCategory = $(this)
        .closest("tr")
        .find(".product-category")
        .text()
        .trim();
      let productPrice = $(this)
        .closest("tr")
        .find(".product-price")
        .text()
        .trim();
      let productUnit = $(this)
        .closest("tr")
        .find(".product-unit")
        .text()
        .trim();

      // We need to fetch the full product details to get description and specifications
      $.ajax({
        method: "GET",
        url: `/admin/product/${productId}`,
        success: function (response) {
          if (response.status === 200) {
            let product = response.data;

            // Populate all fields in the edit modal
            $("#edit-product-name").val(product.name || productName);
            $("#edit-product-code").val(product.product_code || productCode);
            $("#edit-product-category").val(
              product.category ||
                (productCategory === "-" ? "" : productCategory)
            );
            $("#edit-product-price").val(
              product.price || (productPrice === "-" ? "" : productPrice)
            );
            $("#edit-product-description").val(product.description || "");
            $("#edit-product-specifications").val(product.specifications || "");

            $(".save-product").attr("data-id", productId);
            $("#edit-product-modal").modal("show");
            
            // Load inventory units for this product
            loadInventoryUnits(productId);
          } else {
            // Fallback to table data if API fails
            $("#edit-product-name").val(productName);
            $("#edit-product-code").val(productCode);
            $("#edit-product-category").val(
              productCategory === "-" ? "" : productCategory
            );
            $("#edit-product-price").val(
              productPrice === "-" ? "" : productPrice
            );
            $("#edit-product-description").val("");
            $("#edit-product-specifications").val("");

            $(".save-product").attr("data-id", productId);
            $("#edit-product-modal").modal("show");
          }
        },
        error: function (error) {
          // Fallback to table data if API fails
          $("#edit-product-name").val(productName);
          $("#edit-product-code").val(productCode);
          $("#edit-product-category").val(
            productCategory === "-" ? "" : productCategory
          );
          $("#edit-product-price").val(
            productPrice === "-" ? "" : productPrice
          );
          $("#edit-product-description").val("");
          $("#edit-product-specifications").val("");

          $(".save-product").attr("data-id", productId);
          $("#edit-product-modal").modal("show");
        },
      });
    });

    $(document).on("click", ".save-product", function () {
      let productName = $("#edit-product-name").val().trim();
      let productCode = $("#edit-product-code").val().trim();
      let category = $("#edit-product-category").val().trim();
      let price = $("#edit-product-price").val();
      let description = $("#edit-product-description").val().trim();
      let specifications = $("#edit-product-specifications").val().trim();
      let productId = $(this).attr("data-id");

      $.ajax({
        method: "POST",
        url: "/admin/product/update",
        headers: {
          "Content-Type": "application/json",
        },
        data: JSON.stringify({
          productData: {
            productLid: productId,
            name: productName,
            productCode: productCode,
            category: category,
            price: price,
            description: description,
            specifications: specifications,
          },
        }),
        success: function (response) {
          $("#edit-product-modal").modal("hide");
          if (response.status === 200) {
            createAlert({
              title: "Success",
              msg: response.data.message,
              type: "positive",
            });

            let row = $("#table-content").find(`tr[data-id="${productId}"]`);
            row.find(".product-name").text(productName);
            row.find(".product-code").text(productCode);
            row.find(".product-category").text(category || "-");
            row.find(".product-price").text(price || "-");
          } else {
            createAlert({
              title: "Error",
              msg: response.data.message,
              type: "negative",
            });
          }
        },
        error: function (xhr, status, error) {
          let errorMessage = "Something went wrong!";
          
          // Try to parse the error response
          if (xhr.responseJSON && xhr.responseJSON.data && xhr.responseJSON.data.message) {
            errorMessage = xhr.responseJSON.data.message;
          } else if (xhr.responseText) {
            try {
              const errorResponse = JSON.parse(xhr.responseText);
              if (errorResponse.data && errorResponse.data.message) {
                errorMessage = errorResponse.data.message;
              }
            } catch (e) {
              errorMessage = xhr.statusText || errorMessage;
            }
          }
          
          createAlert({
            title: "Error",
            msg: errorMessage,
            type: "negative",
          });
        },
      });
    });

    // DELETE PRODUCT
    $(document).on("click", ".btn-delete", function () {
      let productId = $(this).attr("data-id");
      let thisBtn = $(this);
      const isConfirmed = confirm(
        "Are you sure you want to remove this product?"
      );

      if (!isConfirmed) {
        return false;
      }

      $.ajax({
        method: "POST",
        url: "/admin/product/delete",
        headers: {
          "Content-Type": "application/json",
        },
        data: JSON.stringify({
          productLid: productId,
        }),
        success: function (response) {
          if (response.status === 200) {
            createAlert({
              title: "Success",
              msg: "Product deleted successfully!",
              type: "positive",
            });

            thisBtn.closest("tr").remove();
            $(".bs-tooltip-top").remove();
          } else {
            createAlert({
              title: "ERROR",
              msg: response.data.message,
              type: "negative",
            });
          }
        },
        error: function (xhr, status, error) {
          let errorMessage = "Something went wrong!";
          
          // Try to parse the error response
          if (xhr.responseJSON && xhr.responseJSON.data && xhr.responseJSON.data.message) {
            errorMessage = xhr.responseJSON.data.message;
          } else if (xhr.responseText) {
            try {
              const errorResponse = JSON.parse(xhr.responseText);
              if (errorResponse.data && errorResponse.data.message) {
                errorMessage = errorResponse.data.message;
              }
            } catch (e) {
              errorMessage = xhr.statusText || errorMessage;
            }
          }
          
          createAlert({
            title: "ERROR",
            msg: errorMessage,
            type: "negative",
          });
        },
      });
    });

    // Excel Sample Download
    $('.download-excel-sample').on('click', function() {
      window.location.href = '/admin/product/download-excel-sample';
    });

    // Bulk Upload Modal
    $('.bulk-upload-modal').on('click', function() {
      $('#bulk-upload-modal').modal('show');
      // Reset modal state
      $('#excel-file').val('');
      $('#upload-progress').hide();
      $('#validation-results').hide();
      $('#process-upload').prop('disabled', true);
    });

    // File selection handler
    $('#excel-file').on('change', function() {
      const file = this.files[0];
      if (file) {
        // Validate file type
        const allowedTypes = ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel'];
        if (!allowedTypes.includes(file.type)) {
          createAlert({
            title: 'ERROR',
            msg: 'Please select a valid Excel file (.xlsx or .xls)',
            type: 'negative'
          });
          $(this).val('');
          return;
        }

        // Validate file size (5MB)
        if (file.size > 5 * 1024 * 1024) {
          createAlert({
            title: 'ERROR',
            msg: 'File size must be less than 5MB',
            type: 'negative'
          });
          $(this).val('');
          return;
        }

        // Enable process button
        $('#process-upload').prop('disabled', false);
      } else {
        $('#process-upload').prop('disabled', true);
      }
    });

    // Process Upload
    $('#process-upload').on('click', function() {
      const fileInput = document.getElementById('excel-file');
      const file = fileInput.files[0];
      
      if (!file) {
        createAlert({
          title: 'ERROR',
          msg: 'Please select a file first',
          type: 'negative'
        });
        return;
      }

      const formData = new FormData();
      formData.append('excel-file', file);

      // Show progress
      $('#upload-progress').show();
      $('#validation-results').hide();
      $('#process-upload').prop('disabled', true);

      // Simulate progress
      let progress = 0;
      const progressInterval = setInterval(() => {
        progress += 10;
        $('.progress-bar').css('width', progress + '%').attr('aria-valuenow', progress).text(progress + '%');
        if (progress >= 90) {
          clearInterval(progressInterval);
        }
      }, 200);

      $.ajax({
        url: '/admin/product/bulk-upload',
        type: 'POST',
        data: formData,
        processData: false,
        contentType: false,
        success: function(response) {
          clearInterval(progressInterval);
          $('.progress-bar').css('width', '100%').attr('aria-valuenow', 100).text('100%');
          
          if (response.status === 200) {
            $('#upload-status').html('<small class="text-success">Upload completed successfully!</small>');
            
            // Show validation results
            $('#validation-results').show();
            const summary = response.data.summary;
            $('#validation-summary').html(`
              <div class="row">
                <div class="col-md-3">
                  <div class="text-center">
                    <h5 class="text-primary">${summary.total}</h5>
                    <small>Total Rows</small>
                  </div>
                </div>
                <div class="col-md-3">
                  <div class="text-center">
                    <h5 class="text-success">${summary.valid}</h5>
                    <small>Valid Products</small>
                  </div>
                </div>
                <div class="col-md-3">
                  <div class="text-center">
                    <h5 class="text-warning">${summary.duplicates}</h5>
                    <small>Duplicates</small>
                  </div>
                </div>
                <div class="col-md-3">
                  <div class="text-center">
                    <h5 class="text-danger">${summary.errors}</h5>
                    <small>Errors</small>
                  </div>
                </div>
              </div>
            `);

            // Show errors if any
            if (response.data.errors && response.data.errors.length > 0) {
              let errorHtml = '<h6 class="text-danger mt-3">Validation Errors:</h6><ul class="list-group list-group-flush">';
              response.data.errors.forEach(error => {
                errorHtml += `<li class="list-group-item"><strong>Row ${error.row}:</strong> ${error.message}</li>`;
              });
              errorHtml += '</ul>';
              $('#validation-errors').html(errorHtml);
            }

            if (summary.valid > 0) {
              createAlert({
                title: 'SUCCESS',
                msg: `Successfully processed ${summary.valid} products! ${summary.errors > 0 ? summary.errors + ' rows had errors.' : ''}`,
                type: 'positive',
                reload: true
              });
            } else {
              createAlert({
                title: 'WARNING',
                msg: 'No valid products were found to process. Please check the file format and data.',
                type: 'negative'
              });
            }
          } else {
            $('#upload-status').html('<small class="text-danger">Upload failed!</small>');
            createAlert({
              title: 'ERROR',
              msg: response.data.message || 'Upload failed',
              type: 'negative'
            });
          }
          
          $('#process-upload').prop('disabled', false);
        },
        error: function() {
          clearInterval(progressInterval);
          $('#upload-status').html('<small class="text-danger">Upload failed!</small>');
          createAlert({
            title: 'ERROR',
            msg: 'Something went wrong during upload!',
            type: 'negative'
          });
          $('#process-upload').prop('disabled', false);
        }
      });
    });

    // Inventory Management Functions
    let allInventoryUnits = [];
    let currentFilter = 'all'; // 'all' or 'available'

    function loadInventoryUnits(productId) {
      // Show loading state
      $("#inventory-units-table tbody").html(`
        <tr>
          <td colspan="5" class="text-center text-muted">
            <i class="fas fa-spinner fa-spin"></i> Loading inventory units...
          </td>
        </tr>
      `);

      $.ajax({
        method: "GET",
        url: `/admin/product/${productId}/inventory-units`,
        success: function (response) {
          if (response.status === 200) {
            allInventoryUnits = response.data;
            updateInventoryTable();
            $("#current-inventory-count").text(allInventoryUnits.length);
          } else {
            $("#inventory-units-table tbody").html(`
              <tr>
                <td colspan="5" class="text-center text-danger">
                  <i class="fas fa-exclamation-triangle"></i> Failed to load inventory units
                </td>
              </tr>
            `);
            createAlert({
              title: "Error",
              msg: "Failed to load inventory units",
              type: "negative",
            });
          }
        },
        error: function (xhr, status, error) {
          let errorMessage = "Failed to load inventory units";
          
          // Try to parse the error response
          if (xhr.responseJSON && xhr.responseJSON.data && xhr.responseJSON.data.message) {
            errorMessage = xhr.responseJSON.data.message;
          } else if (xhr.responseText) {
            try {
              const errorResponse = JSON.parse(xhr.responseText);
              if (errorResponse.data && errorResponse.data.message) {
                errorMessage = errorResponse.data.message;
              }
            } catch (e) {
              errorMessage = xhr.statusText || errorMessage;
            }
          }
          
          $("#inventory-units-table tbody").html(`
            <tr>
              <td colspan="5" class="text-center text-danger">
                <i class="fas fa-exclamation-triangle"></i> ${errorMessage}
              </td>
            </tr>
          `);
          createAlert({
            title: "Error",
            msg: errorMessage,
            type: "negative",
          });
        },
      });
    }

    function updateInventoryTable() {
      const tbody = $("#inventory-units-table tbody");
      tbody.empty();

      // Filter units based on current filter
      let unitsToShow = allInventoryUnits;
      if (currentFilter === 'available') {
        unitsToShow = allInventoryUnits.filter(unit => unit.status === 'AVAILABLE');
      }

      if (unitsToShow.length === 0) {
        const message = currentFilter === 'available' ? 'No available inventory units found' : 'No inventory units found';
        tbody.append(`
          <tr>
            <td colspan="5" class="text-center text-muted">${message}</td>
          </tr>
        `);
        return;
      }

      unitsToShow.forEach(function (unit) {
        const statusBadge = getStatusBadge(unit.status);
        const companyName = unit.company_name || "Not Mapped";
        const mappedDate = unit.mapped_at ? new Date(unit.mapped_at).toLocaleDateString() : "-";
        const canDelete = unit.status === "AVAILABLE" && (unit.company_type === "SELF" || !unit.company_type);

        const row = `
          <tr data-unit-id="${unit.id}">
            <td><small class="font-monospace">${unit.unit_serial || unit.id}</small></td>
            <td>${statusBadge}</td>
            <td><small>${companyName}</small></td>
            <td><small>${mappedDate}</small></td>
            <td class="text-center">
              ${canDelete ? `
                <button class="btn btn-sm btn-outline-danger delete-inventory-unit" 
                        data-unit-id="${unit.id}" 
                        title="Delete Unit">
                  <i class="fas fa-trash-alt"></i>
                </button>
              ` : `
                <span class="text-muted" title="Cannot delete - unit is not available or mapped to external company">
                  <i class="fas fa-lock"></i>
                </span>
              `}
            </td>
          </tr>
        `;
        tbody.append(row);
      });
    }

    function getStatusBadge(status) {
      const badges = {
        'AVAILABLE': '<span class="badge bg-success">Available</span>',
        'MAPPED': '<span class="badge bg-warning">Mapped</span>',
        'SOLD': '<span class="badge bg-danger">Sold</span>',
        'RETURNED': '<span class="badge bg-info">Returned</span>'
      };
      return badges[status] || `<span class="badge bg-secondary">${status}</span>`;
    }

    // Add inventory units
    $(document).on("click", "#add-inventory-btn", function () {
      const productId = $(".save-product").attr("data-id");
      const unitsToAdd = parseInt($("#add-inventory-units").val());

      if (!unitsToAdd || unitsToAdd <= 0) {
        createAlert({
          title: "Error",
          msg: "Please enter a valid number of units to add",
          type: "negative",
        });
        return;
      }

      if (unitsToAdd > 100) {
        createAlert({
          title: "Error",
          msg: "Cannot add more than 100 units at once",
          type: "negative",
        });
        return;
      }

      // Disable button during request
      $(this).prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i> Adding...');

      $.ajax({
        method: "POST",
        url: `/admin/product/${productId}/add-inventory-units`,
        headers: {
          "Content-Type": "application/json",
        },
        data: JSON.stringify({
          unitsToAdd: unitsToAdd,
        }),
        success: function (response) {
          if (response.status === 200) {
            createAlert({
              title: "Success",
              msg: response.data.message,
              type: "positive",
            });
            $("#add-inventory-units").val("");
            loadInventoryUnits(productId);
          } else {
            createAlert({
              title: "Error",
              msg: response.data.message,
              type: "negative",
            });
          }
        },
        error: function (xhr, status, error) {
          let errorMessage = "Failed to add inventory units";
          
          // Try to parse the error response
          if (xhr.responseJSON && xhr.responseJSON.data && xhr.responseJSON.data.message) {
            errorMessage = xhr.responseJSON.data.message;
          } else if (xhr.responseText) {
            try {
              const errorResponse = JSON.parse(xhr.responseText);
              if (errorResponse.data && errorResponse.data.message) {
                errorMessage = errorResponse.data.message;
              }
            } catch (e) {
              errorMessage = xhr.statusText || errorMessage;
            }
          }
          
          createAlert({
            title: "Error",
            msg: errorMessage,
            type: "negative",
          });
        },
        complete: function() {
          // Re-enable button
          $("#add-inventory-btn").prop('disabled', false).html('<i class="fas fa-plus"></i> Add');
        }
      });
    });

    // Delete inventory unit
    $(document).on("click", ".delete-inventory-unit", function () {
      const unitId = $(this).attr("data-unit-id");
      const productId = $(".save-product").attr("data-id");

      const isConfirmed = confirm(
        "Are you sure you want to delete this inventory unit? This action cannot be undone."
      );

      if (!isConfirmed) {
        return false;
      }

      // Disable button during request
      $(this).prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i>');

      $.ajax({
        method: "DELETE",
        url: `/admin/product/inventory-unit/${unitId}`,
        success: function (response) {
          if (response.status === 200) {
            createAlert({
              title: "Success",
              msg: response.data.message,
              type: "positive",
            });
            loadInventoryUnits(productId);
          } else {
            createAlert({
              title: "Error",
              msg: response.data.message,
              type: "negative",
            });
          }
        },
        error: function (xhr, status, error) {
          let errorMessage = "Failed to delete inventory unit";
          
          // Try to parse the error response
          if (xhr.responseJSON && xhr.responseJSON.data && xhr.responseJSON.data.message) {
            errorMessage = xhr.responseJSON.data.message;
          } else if (xhr.responseText) {
            try {
              const errorResponse = JSON.parse(xhr.responseText);
              if (errorResponse.data && errorResponse.data.message) {
                errorMessage = errorResponse.data.message;
              }
            } catch (e) {
              // If parsing fails, use the status text or generic message
              errorMessage = xhr.statusText || errorMessage;
            }
          }
          
          createAlert({
            title: "Error",
            msg: errorMessage,
            type: "negative",
          });
        }
      });
    });

    // Refresh inventory
    $(document).on("click", "#refresh-inventory", function () {
      const productId = $(".save-product").attr("data-id");
      if (productId) {
        loadInventoryUnits(productId);
      }
    });

    // Filter buttons
    $(document).on("click", "#show-available-only", function () {
      currentFilter = 'available';
      $(this).removeClass('btn-outline-info').addClass('btn-info');
      $("#show-all-units").removeClass('btn-secondary').addClass('btn-outline-secondary');
      updateInventoryTable();
    });

    $(document).on("click", "#show-all-units", function () {
      currentFilter = 'all';
      $(this).removeClass('btn-outline-secondary').addClass('btn-secondary');
      $("#show-available-only").removeClass('btn-info').addClass('btn-outline-info');
      updateInventoryTable();
    });

  });
</script>
<!--END CUSTOM JS SCRIPT -->

<%- include ('../partials/footer-end') %>
